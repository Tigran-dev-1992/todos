{"version":3,"sources":["Components/AboutPage/AboutPage.tsx","Components/Alert/AlertContext.ts","Components/Alert/Alert.tsx","Components/Hompage/Notes/Note.tsx","Components/Hompage/Notes/Notes.tsx","Components/Hompage/Notes/NoteForm.tsx","Components/Hompage/Notes/NotesContext.ts","Components/Commons/Preloader.tsx","Components/Hompage/Notes/Empty.tsx","Components/Hompage/HomePage.tsx","Components/Navbar/Navbar.tsx","Components/Alert/alert-reducer.ts","Components/Alert/AlertState.tsx","Api/api.ts","Components/Hompage/Notes/notes-reducer.ts","Components/Hompage/Notes/NotesState.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AboutPage","className","AlertContext","createContext","Alert","alert","useContext","alertText","alertType","CSSTransition","in","visible","classNames","timeout","unmountOnExit","mountOnEnter","onClick","hide","type","Note","note","deleteNode","title","Date","toDateString","id","show","Notes","notes","TransitionGroup","component","map","NoteForm","addNote","useState","inputValue","setInputValue","onSubmit","e","trim","preventDefault","data","toLocaleString","placeholder","value","onChange","target","NotesContext","Preloader","src","alt","Empty","HomePage","useEffect","getNotes","notesInfo","loading","deleteNote","length","Navbar","to","exact","SHOW_ALERT","HIDE_ALERT","alertInitialState","alertActions","payload","alertReducer","state","action","AlertState","children","useReducer","dispatch","Provider","url","notesApi","axios","get","then","res","post","delete","SET_NOTES","DELETE_NOTE","SET_LOADING","notesInitialState","notesActions","name","notesReducer","filter","NotesState","a","statusText","Object","keys","key","i","App","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f7db12da.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst AboutPage = () => {\r\n    return (\r\n        <div className=\"aboutPage\">\r\n            This is a small react application width using typescript and hooks and without redux.\r\n        </div>\r\n    )\r\n}\r\nexport default AboutPage","import { createContext } from \"react\";\r\nimport { AlertInitialStateType } from \"./alert-reducer\";\r\n\r\ntype AlertFunctionsType = {\r\n    show: (payload: { alertText: string; alertType: string; visible: boolean }) => void\r\n    hide: () => void\r\n}\r\nexport type AlertContextValueType = AlertFunctionsType & AlertInitialStateType | null\r\n\r\nexport const AlertContext = createContext<AlertContextValueType>(null)","import React, { useContext, useState } from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { createModuleResolutionCache } from 'typescript'\r\nimport { AlertContext } from './AlertContext'\r\n\r\n\r\nconst Alert = () =>{\r\n    const alert = useContext(AlertContext)\r\n    const { alertText, alertType} = { ...alert }\r\n    return (\r\n        <CSSTransition in={alert?.visible} classNames='alert' timeout={300} unmountOnExit mountOnEnter>\r\n            <div className={`alert alert-${alertType} d-flex justify-content-between`} onClick={()=>alert?.hide()}>\r\n                {alertText}\r\n                <button type=\"button\" className=\"btn btn-outline-danger btn-sm\" onClick={()=>alert?.hide()}>&times;</button>\r\n            </div>\r\n        </CSSTransition>\r\n\r\n    )\r\n}\r\n\r\nexport default Alert","import React, { useContext } from \"react\"\r\nimport { AlertContext } from \"../../Alert/AlertContext\"\r\nimport { NoteType } from \"./notes-reducer\"\r\n\r\ntype PropsType = {\r\n    note: NoteType\r\n    deleteNode: (id: string) => Promise<void>\r\n}\r\n\r\nconst Note: React.FC<PropsType> = ({ note, deleteNode }) => {\r\n    const alert = useContext(AlertContext)\r\n\r\n    const handlerClick = () => {\r\n        deleteNode(note.id)\r\n        alert?.show({ alertText: \"You delete  note succsess!!!\", alertType: \"success\", visible: true })\r\n    }\r\n    return (\r\n        <div className=\"note d-flex justify-content-between align-items-center\">\r\n            <div className=\"note__title\">\r\n                <b> {note.title}</b>\r\n                <small className=\"ml-4\"> {new Date().toDateString()}</small>\r\n            </div>\r\n            <div>\r\n                <button type=\"button\" className=\"btn btn-outline-danger btn-sm\" onClick={handlerClick}>&times;</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Note","import React from \"react\"\r\nimport {  TransitionGroup,CSSTransition } from \"react-transition-group\"\r\nimport Note from \"./Note\"\r\nimport { NoteType } from \"./notes-reducer\"\r\n\r\n\r\n\r\ntype PropsType = {\r\n    notes: NoteType[]\r\n    deleteNode: (id: string) => Promise<void>\r\n}\r\nconst Notes: React.FC<PropsType> = ({ notes, deleteNode }) => {\r\n    return (\r\n        <div className=\"mt-2\">\r\n            <TransitionGroup component=\"ul\" className=\"list-group\">\r\n                {notes.map(note => {\r\n                    return (\r\n                        <CSSTransition timeout={800}  key={note.id} classNames={'note'}>\r\n                            <li className=\"list-group-item mt-2\" > <Note note={note} deleteNode={deleteNode} /></li>\r\n                        </CSSTransition>\r\n                    )\r\n                })}\r\n            </TransitionGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Notes\r\n\r\n\r\n","import React, { useContext, useState } from \"react\"\r\nimport { AlertContext } from \"../../Alert/AlertContext\"\r\n\r\nexport type NoteDataType = {\r\n    title: string\r\n    data: string\r\n}\r\ntype PropsType = {\r\n    addNote: (note: NoteDataType) => Promise<void>\r\n}\r\n\r\nconst NoteForm: React.FC<PropsType> = ({ addNote }) => {\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const alert = useContext(AlertContext)\r\n\r\n\r\n    const handlerSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        if (inputValue.trim()) {\r\n            e.preventDefault()\r\n            addNote({ title: inputValue, data: new Date().toLocaleString() })\r\n            alert?.show({ alertText: \"You created  note succsess!!!\", alertType: \"success\", visible: true })\r\n            setInputValue(\"\")\r\n        }\r\n        else{\r\n            e.preventDefault()\r\n            alert?.show({ alertText: \"Enter note title please!!!\", alertType: \"danger\", visible: true })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"form\">\r\n            <form onSubmit={handlerSubmit}>\r\n                <input type=\"text\" className=\"form-control p-4 mt-4\" placeholder=\"Enter note name\" value={inputValue}\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setInputValue(e.target.value)} />\r\n                    <button className=\"btn btn-primary btn-add mt-4 p-2\">Add Note</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default NoteForm","import { createContext } from \"react\";\r\nimport { NoteDataType } from \"./NoteForm\";\r\nimport { NotesInitialStateType} from \"./notes-reducer\";\r\n\r\ntype NotesFunctionsType = {\r\n    getNotes: () => Promise<void>\r\n    addNote: (note: NoteDataType) => Promise<void>\r\n    deleteNote: (id:string) => Promise<void>\r\n}\r\n\r\ntype NotesContextValueType = NotesFunctionsType&NotesInitialStateType|null\r\n\r\nexport const NotesContext = createContext<NotesContextValueType>({} as NotesContextValueType)","import react from 'react'\r\n\r\nexport const Preloader = ()=>{\r\n    return(\r\n        <div className=\"preloader\">\r\n            <img src=\"https://i.pinimg.com/originals/28/6d/55/286d55b857d2bfae597306fd518846c4.gif\" alt=\"\"/>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\n\r\nexport const Empty = ()=>{\r\n    return(\r\n        <div className=\"empty\">\r\n            List is empty, enter note please!!!\r\n        </div>\r\n    )\r\n}","import React, { useContext, useEffect } from 'react'\r\nimport Alert from '../Alert/Alert'\r\nimport Notes from './Notes/Notes'\r\nimport NoteForm from './Notes/NoteForm'\r\nimport { NotesContext } from './Notes/NotesContext'\r\nimport { Preloader } from '../Commons/Preloader'\r\nimport { Empty } from './Notes/Empty'\r\n\r\nconst HomePage = () => {\r\n    useEffect(() => {\r\n        getNotes()\r\n    }, [])\r\n    const notesInfo = useContext(NotesContext)\r\n    if (!notesInfo) {\r\n        return null\r\n    }\r\n    const { loading, notes, getNotes, addNote, deleteNote } = { ...notesInfo }\r\n    return (\r\n        <div>\r\n            <Alert />\r\n           {notes&&notes.length\r\n                    ? <Notes notes={notes} deleteNode={deleteNote} />\r\n                    : <Empty/>\r\n            }\r\n             <NoteForm addNote={addNote} />\r\n            {loading&&<Preloader/>}\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default HomePage","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\n\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar fixed-top navbar-dark bg-dark\">\r\n                    <div className=\"navbar-brand\" >\r\n                        Navbar\r\n                        </div>\r\n                    <ul className=\" d-flex align-items-center nav__items\">\r\n                        <li className=\"nav-item \">\r\n                            <NavLink className=\"nav-link\" to=\"/todos\" exact>Home</NavLink>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <NavLink className=\"nav-link\" to=\"/about\">About</NavLink>\r\n                        </li>\r\n                    </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","const SHOW_ALERT = \"SHOW_ALERT\"\r\nconst HIDE_ALERT = \"HIDE_ALERT\"\r\n\r\n\r\n\r\nexport const alertInitialState = {\r\n    alertText: \"\",\r\n    alertType: \"\",\r\n    visible: false\r\n}\r\nexport type AlertInitialStateType = typeof alertInitialState\r\n\r\ntype ProprtisType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<ProprtisType<T>>\r\n\r\nexport const alertActions = {\r\n    showAlert: (payload: AlertInitialStateType) => ({ type: SHOW_ALERT, payload } as const),\r\n    hideAlert: () => ({ type: HIDE_ALERT } as const)\r\n}\r\ntype AlertActionsType = InferActionsType<typeof alertActions>\r\n\r\nexport const alertReducer = (state: AlertInitialStateType, action: AlertActionsType):AlertInitialStateType => {\r\n    switch (action.type) {\r\n        case SHOW_ALERT:\r\n          return  {\r\n            ...action.payload\r\n         }\r\n         case HIDE_ALERT:\r\n            return  {\r\n              ...state,visible: false\r\n            }\r\n         default : return state\r\n }\r\n}\r\n","import React, { useReducer } from 'react'\r\nimport { alertActions, alertInitialState, AlertInitialStateType, alertReducer } from './alert-reducer'\r\nimport { AlertContext } from './AlertContext'\r\n\r\n\r\nconst AlertState: React.FC = ({ children }) => {\r\n    const [state, dispatch] = useReducer(alertReducer, alertInitialState)\r\n    const show = (payload: AlertInitialStateType) => (dispatch(alertActions.showAlert(payload)))\r\n    const hide = () => (dispatch(alertActions.hideAlert()))\r\n    return (\r\n        <AlertContext.Provider value={{ ...state, show, hide }}>\r\n            {children}\r\n        </AlertContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AlertState","import axios, { } from \"axios\"\r\nimport { NoteDataType } from \"../Components/Hompage/Notes/NoteForm\"\r\n\r\n\r\nconst url = \"https://todolist-fab4e-default-rtdb.firebaseio.com/\"\r\n\r\n\r\ntype GetDataType = {\r\n    [keys: string]: {\r\n        title: string\r\n        date: string\r\n    }\r\n}\r\ntype PostDataType = {\r\n    name: string\r\n}\r\n\r\nexport const notesApi = {\r\n    getNotesData() {\r\n        return axios.get<GetDataType>(`${url}/notes.json`)\r\n            .then((res) => {\r\n               return res\r\n            }\r\n            )\r\n    },\r\n    addNewNote(note: NoteDataType) {\r\n      return  axios.post<PostDataType>(`${url}/notes.json`, note)\r\n            .then(res => {\r\n                return res\r\n            })\r\n    },\r\n    deleteNote(id: string) {\r\n      return  axios.delete(`${url}/notes/${id}.json`)\r\n            .then(res => {\r\n                return res\r\n            })\r\n    }\r\n}\r\n","import { InferActionsType } from \"../../Alert/alert-reducer\"\r\n\r\nconst SET_NOTES = \"SET_NOTES\"\r\nconst DELETE_NOTE = \"DELETE_NOTES\"\r\nconst SET_LOADING = \"SET_LOADING\"\r\n\r\nexport type NoteType = {\r\n    id: string\r\n    title: string\r\n    date: string\r\n}\r\n\r\nexport const notesInitialState = {\r\n    notes: [] as NoteType[],\r\n    loading:false\r\n}\r\n\r\nexport type NotesInitialStateType = typeof notesInitialState\r\n\r\nexport const notesActions = {\r\n    setNotes: (notes: NoteType[]) => ({ type: SET_NOTES, notes } as const),\r\n    deleteNote: (name: string) => ({ type: DELETE_NOTE, name } as const),\r\n    setLoading: (loading: boolean) => ({ type: SET_LOADING, loading } as const)\r\n}\r\ntype NotesActionsType = InferActionsType<typeof notesActions>\r\n\r\n\r\nexport const notesReducer = (state: NotesInitialStateType, action: NotesActionsType): NotesInitialStateType => {\r\n    switch (action.type) {\r\n        case SET_NOTES:\r\n            return {\r\n                ...state, notes: action.notes\r\n            }\r\n        case DELETE_NOTE:\r\n            return {\r\n                ...state, notes: state.notes.filter(note => note.id !== action.name)\r\n            }\r\n            case SET_LOADING:\r\n            return {\r\n                ...state, loading:action.loading\r\n            }\r\n        default: return state\r\n    }\r\n}","import React, { useReducer } from 'react'\r\nimport { notesApi } from '../../../Api/api'\r\nimport { NoteDataType } from './NoteForm'\r\nimport { notesActions, notesInitialState, notesReducer} from './notes-reducer'\r\nimport { NotesContext } from './NotesContext'\r\n\r\n\r\n\r\nexport const NotesState: React.FC = ({ children }) => {\r\n    const [state, dispatch] = useReducer(notesReducer, notesInitialState)\r\n    const getNotes = async () => {\r\n        dispatch(notesActions.setLoading(true))\r\n        const res = await notesApi.getNotesData()\r\n        if (res.statusText === \"OK\") {\r\n            let notes = res.data && Object.keys(res.data).map((key, i) => {\r\n                return {\r\n                    ...res.data[key],\r\n                    id: key\r\n                }\r\n            })\r\n            dispatch(notesActions.setNotes(notes))\r\n            dispatch(notesActions.setLoading(false))\r\n        }\r\n\r\n    }\r\n    const addNote = async (note: NoteDataType) => {\r\n        dispatch(notesActions.setLoading(true))\r\n        const res = await notesApi.addNewNote(note)\r\n        if (res.statusText === \"OK\") {\r\n            getNotes()\r\n            dispatch(notesActions.setLoading(false))\r\n        }\r\n    }\r\n    const deleteNote = async (id: string) => {\r\n        dispatch(notesActions.setLoading(true))\r\n        const res = await notesApi.deleteNote(id)\r\n        if (res.statusText === \"OK\") {\r\n            dispatch(notesActions.deleteNote(id))\r\n            dispatch(notesActions.setLoading(false))\r\n        }\r\n    }\r\n    return (\r\n        <NotesContext.Provider value={{ ...state, getNotes, addNote, deleteNote }}>\r\n            {children}\r\n        </NotesContext.Provider>\r\n    )\r\n}","import React from 'react';\nimport AboutPage from './Components/AboutPage/AboutPage';\nimport HomePage from './Components/Hompage/HomePage';\nimport Navbar from './Components/Navbar/Navbar';\nimport AlertState from './Components/Alert/AlertState';\nimport { NotesState } from './Components/Hompage/Notes/NotesState';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <NotesState>\n        <AlertState>\n          <Navbar />\n          <Switch>\n            <div className=\"app pt-5\">\n              <div className=\"container pt-4\">\n                <Route path=\"/\" exact render={() => <Redirect to={\"/todos\"} />}/>\n                <Route path=\"/about\" exact component={AboutPage} />\n                <Route path=\"/todos\" exact component={HomePage} />\n              </div>\n            </div>\n          </Switch>\n        </AlertState>\n      </NotesState>\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}